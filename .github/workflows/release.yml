name: Build and Release

on:
  push:

jobs:
  build-windows:
    name: Build for Windows
    runs-on: ubuntu-latest
    env:
      aria2_version: "1.37.0"
      libssh2_version: "1.11.0"
      llvm_path: "${{ github.workspace }}/llvm-mingw"
      libssh2_path: "${{ github.workspace }}/libssh2-windows-arm64"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install tools
        run: |
          sudo apt update
          sudo apt install \
            build-essential cmake ninja-build pkg-config p7zip autoconf automake libtool autopoint libxml2-dev libcppunit-dev autotools-dev
          wget https://github.com/mstorsjo/llvm-mingw/releases/download/20220906/llvm-mingw-20220906-ucrt-ubuntu-18.04-x86_64.tar.xz
          tar -xf llvm-mingw-*.tar.xz
          mv llvm-mingw-20220906-ucrt-ubuntu-18.04-x86_64 llvm-mingw
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh

      - name: Install libraries from vcpkg
        run: |
          PATH=$PATH:${{ env.llvm_path }}/bin
          cd vcpkg
          git apply ${{ github.workspace }}/patches/vcpkg-disable-asm-for-arm32.patch
          # tell vcpkg to only build Release variants of the dependencies
          mkdir triplets_overlay
          cp triplets/community/arm64-mingw-static.cmake triplets_overlay/arm64-mingw-static-release.cmake
          cp triplets/community/arm-mingw-static.cmake triplets_overlay/arm-mingw-static-release.cmake
          cp triplets/community/x64-mingw-static.cmake triplets_overlay/x64-mingw-static-release.cmake
          cp triplets/community/x86-mingw-static.cmake triplets_overlay/x86-mingw-static-release.cmake
          echo "set(VCPKG_BUILD_TYPE release)" >> triplets_overlay/arm64-mingw-static-release.cmake
          echo "set(VCPKG_BUILD_TYPE release)" >> triplets_overlay/arm-mingw-static-release.cmake
          echo "set(VCPKG_BUILD_TYPE release)" >> triplets_overlay/x64-mingw-static-release.cmake
          echo "set(VCPKG_BUILD_TYPE release)" >> triplets_overlay/x86-mingw-static-release.cmake
          # clear buildtrees after each package installation to reduce disk space requirements
          packages="zlib expat sqlite3 c-ares gmp"
          ./vcpkg upgrade \
            --overlay-triplets=triplets_overlay \
            --no-dry-run
          ./vcpkg install \
            --overlay-triplets=triplets_overlay \
            --clean-after-build \
            --triplet=arm64-mingw-static-release \
            $packages
          ./vcpkg install \
            --overlay-triplets=triplets_overlay \
            --clean-after-build \
            --triplet=arm-mingw-static-release \
            $packages
          ./vcpkg install \
            --overlay-triplets=triplets_overlay \
            --clean-after-build \
            --triplet=x64-mingw-static-release \
            $packages
          ./vcpkg install \
            --overlay-triplets=triplets_overlay \
            --clean-after-build \
            --triplet=x86-mingw-static-release \
            $packages

      - name: Build aria2
        run: |
          chmod 755 build.sh
          ./build.sh arm64
          ./build.sh x64

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aria2-windows
          path: aria2*.zip

  build-macos:
    name: Build for macOS
    runs-on: macos-latest
    env:
      aria2_version: "1.37.0"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install tools and dependencies
        run: |
          brew install automake autoconf libtool pkg-config gettext p7zip
          brew install gmp libssh2 c-ares sqlite3 zlib expat

      - name: Import Code-Signing Certificate
        if: startsWith(github.ref, 'refs/tags/')
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
          p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}

      - name: Build aria2
        env:
          APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          chmod +x build-mac.sh
          ./build-mac.sh

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aria2-macos
          path: aria2*.zip

  release:
    name: Release
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List files
        run: ls -R artifacts

      - name: Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: artifacts/**/*.zip
